/* 使用包、Crate和模块管理不断增长的项目 */

// 一个包可以包含多个二进制 crate 项 和 一个可选的 crate 库
// 伴随着包的增长，可以将包中部分代码提取出来，做成独立的 crate，这些 crate 可以作为外部依赖项。
// 作用域(scope): 代码所在的嵌套上下文有一组定义为“in scope"的名称。
//      当阅读、编写、编译代码时，需要知道特定名称是否引用了变量、函数、结构体、枚举、模块、常量、或者其他有意义的项。
//      可以创建作用域，改变那些名称在作用域内还是作用于外。
//      同一个作用域内不能拥有两个相同名称的项，可以使用一些工具来解决名称冲突（自己找工具）。
// 模块系统(the module system):Rust 有许多功能可以让你管理代码的组织，包括哪些内容可以被公开，哪些内容作为私有部分，以及程序每个作用域的名字。
//  包括：
//      · 包（packages）: Cargo 的一个功能，他允许你构建、测试和分享 crate.
//      · Crate: 一个模块的树形结构，它形成了库和二进制项目
//      · 模块(Modules)和use: 允许你控制作用域和路径的私有性 
//      · 路径(path): 一个命名方式。例如结构体、函数或模块的项

/* 包 和 Crate */
fn main() {
    println!("Hello, world!");
}
